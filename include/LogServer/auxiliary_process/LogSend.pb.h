// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogSend.proto

#ifndef PROTOBUF_INCLUDED_LogSend_2eproto
#define PROTOBUF_INCLUDED_LogSend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LogSend_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_LogSend_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_LogSend_2eproto();
namespace ik {
class LogSendReponse;
class LogSendReponseDefaultTypeInternal;
extern LogSendReponseDefaultTypeInternal _LogSendReponse_default_instance_;
class LogSendRequest;
class LogSendRequestDefaultTypeInternal;
extern LogSendRequestDefaultTypeInternal _LogSendRequest_default_instance_;
}  // namespace ik
namespace google {
namespace protobuf {
template<> ::ik::LogSendReponse* Arena::CreateMaybeMessage<::ik::LogSendReponse>(Arena*);
template<> ::ik::LogSendRequest* Arena::CreateMaybeMessage<::ik::LogSendRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik {

// ===================================================================

class LogSendRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik.LogSendRequest) */ {
 public:
  LogSendRequest();
  virtual ~LogSendRequest();

  LogSendRequest(const LogSendRequest& from);

  inline LogSendRequest& operator=(const LogSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogSendRequest(LogSendRequest&& from) noexcept
    : LogSendRequest() {
    *this = ::std::move(from);
  }

  inline LogSendRequest& operator=(LogSendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogSendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogSendRequest* internal_default_instance() {
    return reinterpret_cast<const LogSendRequest*>(
               &_LogSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogSendRequest* other);
  friend void swap(LogSendRequest& a, LogSendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogSendRequest* New() const final {
    return CreateMaybeMessage<LogSendRequest>(nullptr);
  }

  LogSendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogSendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogSendRequest& from);
  void MergeFrom(const LogSendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const void* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // bytes time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:ik.LogSendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LogSend_2eproto;
};
// -------------------------------------------------------------------

class LogSendReponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik.LogSendReponse) */ {
 public:
  LogSendReponse();
  virtual ~LogSendReponse();

  LogSendReponse(const LogSendReponse& from);

  inline LogSendReponse& operator=(const LogSendReponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogSendReponse(LogSendReponse&& from) noexcept
    : LogSendReponse() {
    *this = ::std::move(from);
  }

  inline LogSendReponse& operator=(LogSendReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogSendReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogSendReponse* internal_default_instance() {
    return reinterpret_cast<const LogSendReponse*>(
               &_LogSendReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogSendReponse* other);
  friend void swap(LogSendReponse& a, LogSendReponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogSendReponse* New() const final {
    return CreateMaybeMessage<LogSendReponse>(nullptr);
  }

  LogSendReponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogSendReponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogSendReponse& from);
  void MergeFrom(const LogSendReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSendReponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  ::google::protobuf::int32 serial() const;
  void set_serial(::google::protobuf::int32 value);

  // bool is_end = 2;
  void clear_is_end();
  static const int kIsEndFieldNumber = 2;
  bool is_end() const;
  void set_is_end(bool value);

  // @@protoc_insertion_point(class_scope:ik.LogSendReponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 serial_;
  bool is_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LogSend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogSendRequest

// bytes node_name = 1;
inline void LogSendRequest::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSendRequest::node_name() const {
  // @@protoc_insertion_point(field_get:ik.LogSendRequest.node_name)
  return node_name_.GetNoArena();
}
inline void LogSendRequest::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendRequest.node_name)
}
#if LANG_CXX11
inline void LogSendRequest::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik.LogSendRequest.node_name)
}
#endif
inline void LogSendRequest::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendRequest.node_name)
}
inline void LogSendRequest::set_node_name(const void* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendRequest.node_name)
}
inline ::std::string* LogSendRequest::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendRequest.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSendRequest::release_node_name() {
  // @@protoc_insertion_point(field_release:ik.LogSendRequest.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSendRequest::set_allocated_node_name(::std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendRequest.node_name)
}

// bytes time = 2;
inline void LogSendRequest::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSendRequest::time() const {
  // @@protoc_insertion_point(field_get:ik.LogSendRequest.time)
  return time_.GetNoArena();
}
inline void LogSendRequest::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendRequest.time)
}
#if LANG_CXX11
inline void LogSendRequest::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik.LogSendRequest.time)
}
#endif
inline void LogSendRequest::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendRequest.time)
}
inline void LogSendRequest::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendRequest.time)
}
inline ::std::string* LogSendRequest::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendRequest.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSendRequest::release_time() {
  // @@protoc_insertion_point(field_release:ik.LogSendRequest.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSendRequest::set_allocated_time(::std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendRequest.time)
}

// -------------------------------------------------------------------

// LogSendReponse

// int32 serial = 1;
inline void LogSendReponse::clear_serial() {
  serial_ = 0;
}
inline ::google::protobuf::int32 LogSendReponse::serial() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.serial)
  return serial_;
}
inline void LogSendReponse::set_serial(::google::protobuf::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.serial)
}

// bool is_end = 2;
inline void LogSendReponse::clear_is_end() {
  is_end_ = false;
}
inline bool LogSendReponse::is_end() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.is_end)
  return is_end_;
}
inline void LogSendReponse::set_is_end(bool value) {
  
  is_end_ = value;
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.is_end)
}

// bytes msg = 3;
inline void LogSendReponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogSendReponse::msg() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.msg)
  return msg_.GetNoArena();
}
inline void LogSendReponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.msg)
}
#if LANG_CXX11
inline void LogSendReponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik.LogSendReponse.msg)
}
#endif
inline void LogSendReponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendReponse.msg)
}
inline void LogSendReponse::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendReponse.msg)
}
inline ::std::string* LogSendReponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendReponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogSendReponse::release_msg() {
  // @@protoc_insertion_point(field_release:ik.LogSendReponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogSendReponse::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendReponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_LogSend_2eproto
