// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendService.proto

#ifndef PROTOBUF_INCLUDED_FriendService_2eproto
#define PROTOBUF_INCLUDED_FriendService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FriendService_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_FriendService_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_FriendService_2eproto();
namespace ik_FriendService {
class AddFriendRequest;
class AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class DeleteFriendRequest;
class DeleteFriendRequestDefaultTypeInternal;
extern DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
class FriendInfo;
class FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendListRequest;
class FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListResponse;
class FriendListResponseDefaultTypeInternal;
extern FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoResponse;
class UserInfoResponseDefaultTypeInternal;
extern UserInfoResponseDefaultTypeInternal _UserInfoResponse_default_instance_;
}  // namespace ik_FriendService
namespace google {
namespace protobuf {
template<> ::ik_FriendService::AddFriendRequest* Arena::CreateMaybeMessage<::ik_FriendService::AddFriendRequest>(Arena*);
template<> ::ik_FriendService::DeleteFriendRequest* Arena::CreateMaybeMessage<::ik_FriendService::DeleteFriendRequest>(Arena*);
template<> ::ik_FriendService::FriendInfo* Arena::CreateMaybeMessage<::ik_FriendService::FriendInfo>(Arena*);
template<> ::ik_FriendService::FriendListRequest* Arena::CreateMaybeMessage<::ik_FriendService::FriendListRequest>(Arena*);
template<> ::ik_FriendService::FriendListResponse* Arena::CreateMaybeMessage<::ik_FriendService::FriendListResponse>(Arena*);
template<> ::ik_FriendService::UserInfoRequest* Arena::CreateMaybeMessage<::ik_FriendService::UserInfoRequest>(Arena*);
template<> ::ik_FriendService::UserInfoResponse* Arena::CreateMaybeMessage<::ik_FriendService::UserInfoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik_FriendService {

// ===================================================================

class UserInfoRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.UserInfoRequest) */ {
 public:
  UserInfoRequest();
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfoRequest* other);
  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.UserInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.UserInfoResponse) */ {
 public:
  UserInfoResponse();
  virtual ~UserInfoResponse();

  UserInfoResponse(const UserInfoResponse& from);

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfoResponse(UserInfoResponse&& from) noexcept
    : UserInfoResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoResponse& operator=(UserInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoResponse*>(
               &_UserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserInfoResponse* other);
  friend void swap(UserInfoResponse& a, UserInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfoResponse* New() const final {
    return CreateMaybeMessage<UserInfoResponse>(nullptr);
  }

  UserInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfoResponse& from);
  void MergeFrom(const UserInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.UserInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendInfo) */ {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FriendInfo* other);
  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const final {
    return CreateMaybeMessage<FriendInfo>(nullptr);
  }

  FriendInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendListRequest) */ {
 public:
  FriendListRequest();
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendListRequest(FriendListRequest&& from) noexcept
    : FriendListRequest() {
    *this = ::std::move(from);
  }

  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
               &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FriendListRequest* other);
  friend void swap(FriendListRequest& a, FriendListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendListRequest* New() const final {
    return CreateMaybeMessage<FriendListRequest>(nullptr);
  }

  FriendListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.FriendListResponse) */ {
 public:
  FriendListResponse();
  virtual ~FriendListResponse();

  FriendListResponse(const FriendListResponse& from);

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendListResponse(FriendListResponse&& from) noexcept
    : FriendListResponse() {
    *this = ::std::move(from);
  }

  inline FriendListResponse& operator=(FriendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FriendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListResponse* internal_default_instance() {
    return reinterpret_cast<const FriendListResponse*>(
               &_FriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FriendListResponse* other);
  friend void swap(FriendListResponse& a, FriendListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendListResponse* New() const final {
    return CreateMaybeMessage<FriendListResponse>(nullptr);
  }

  FriendListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendListResponse& from);
  void MergeFrom(const FriendListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ik_FriendService.FriendInfo friends = 2;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 2;
  ::ik_FriendService::FriendInfo* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >*
      mutable_friends();
  const ::ik_FriendService::FriendInfo& friends(int index) const;
  ::ik_FriendService::FriendInfo* add_friends();
  const ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >&
      friends() const;

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.FriendListResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo > friends_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.AddFriendRequest) */ {
 public:
  AddFriendRequest();
  virtual ~AddFriendRequest();

  AddFriendRequest(const AddFriendRequest& from);

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AddFriendRequest* other);
  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFriendRequest* New() const final {
    return CreateMaybeMessage<AddFriendRequest>(nullptr);
  }

  AddFriendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFriendRequest& from);
  void MergeFrom(const AddFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 myid = 1;
  void clear_myid();
  static const int kMyidFieldNumber = 1;
  ::google::protobuf::int32 myid() const;
  void set_myid(::google::protobuf::int32 value);

  // int32 friendid = 2;
  void clear_friendid();
  static const int kFriendidFieldNumber = 2;
  ::google::protobuf::int32 friendid() const;
  void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.AddFriendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 myid_;
  ::google::protobuf::int32 friendid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_FriendService.DeleteFriendRequest) */ {
 public:
  DeleteFriendRequest();
  virtual ~DeleteFriendRequest();

  DeleteFriendRequest(const DeleteFriendRequest& from);

  inline DeleteFriendRequest& operator=(const DeleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteFriendRequest(DeleteFriendRequest&& from) noexcept
    : DeleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRequest& operator=(DeleteFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRequest*>(
               &_DeleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteFriendRequest* other);
  friend void swap(DeleteFriendRequest& a, DeleteFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendRequest* New() const final {
    return CreateMaybeMessage<DeleteFriendRequest>(nullptr);
  }

  DeleteFriendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteFriendRequest& from);
  void MergeFrom(const DeleteFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 myid = 1;
  void clear_myid();
  static const int kMyidFieldNumber = 1;
  ::google::protobuf::int32 myid() const;
  void set_myid(::google::protobuf::int32 value);

  // int32 friendid = 2;
  void clear_friendid();
  static const int kFriendidFieldNumber = 2;
  ::google::protobuf::int32 friendid() const;
  void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_FriendService.DeleteFriendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 myid_;
  ::google::protobuf::int32 friendid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FriendService_2eproto;
};
// ===================================================================

class FriendServiceRpc_Stub;

class FriendServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendServiceRpc() {};
 public:
  virtual ~FriendServiceRpc();

  typedef FriendServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetUserInfo(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::UserInfoRequest* request,
                       ::ik_FriendService::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::FriendListRequest* request,
                       ::ik_FriendService::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::AddFriendRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteFriend(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::DeleteFriendRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc);
};

class FriendServiceRpc_Stub : public FriendServiceRpc {
 public:
  FriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  FriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FriendServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements FriendServiceRpc ------------------------------------------

  void GetUserInfo(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::UserInfoRequest* request,
                       ::ik_FriendService::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::FriendListRequest* request,
                       ::ik_FriendService::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::AddFriendRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
  void DeleteFriend(::google::protobuf::RpcController* controller,
                       const ::ik_FriendService::DeleteFriendRequest* request,
                       ::google::protobuf::Empty* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoRequest

// int32 id = 1;
inline void UserInfoRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UserInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoRequest.id)
  return id_;
}
inline void UserInfoRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoRequest.id)
}

// -------------------------------------------------------------------

// UserInfoResponse

// int32 id = 1;
inline void UserInfoResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UserInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoResponse.id)
  return id_;
}
inline void UserInfoResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoResponse.id)
}

// bytes name = 2;
inline void UserInfoResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoResponse.name)
  return name_.GetNoArena();
}
inline void UserInfoResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoResponse.name)
}
#if LANG_CXX11
inline void UserInfoResponse::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_FriendService.UserInfoResponse.name)
}
#endif
inline void UserInfoResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_FriendService.UserInfoResponse.name)
}
inline void UserInfoResponse::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_FriendService.UserInfoResponse.name)
}
inline ::std::string* UserInfoResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_FriendService.UserInfoResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.UserInfoResponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoResponse::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.UserInfoResponse.name)
}

// -------------------------------------------------------------------

// FriendInfo

// int32 id = 1;
inline void FriendInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FriendInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.id)
  return id_;
}
inline void FriendInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.id)
}

// bytes name = 2;
inline void FriendInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.name)
  return name_.GetNoArena();
}
inline void FriendInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.name)
}
#if LANG_CXX11
inline void FriendInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_FriendService.FriendInfo.name)
}
#endif
inline void FriendInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_FriendService.FriendInfo.name)
}
inline void FriendInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_FriendService.FriendInfo.name)
}
inline ::std::string* FriendInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.FriendInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.FriendInfo.name)
}

// -------------------------------------------------------------------

// FriendListRequest

// int32 id = 1;
inline void FriendListRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FriendListRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListRequest.id)
  return id_;
}
inline void FriendListRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListRequest.id)
}

// -------------------------------------------------------------------

// FriendListResponse

// bool is_success = 1;
inline void FriendListResponse::clear_is_success() {
  is_success_ = false;
}
inline bool FriendListResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.is_success)
  return is_success_;
}
inline void FriendListResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListResponse.is_success)
}

// repeated .ik_FriendService.FriendInfo friends = 2;
inline int FriendListResponse::friends_size() const {
  return friends_.size();
}
inline void FriendListResponse::clear_friends() {
  friends_.Clear();
}
inline ::ik_FriendService::FriendInfo* FriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendListResponse.friends)
  return friends_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >*
FriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ik_FriendService.FriendListResponse.friends)
  return &friends_;
}
inline const ::ik_FriendService::FriendInfo& FriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.friends)
  return friends_.Get(index);
}
inline ::ik_FriendService::FriendInfo* FriendListResponse::add_friends() {
  // @@protoc_insertion_point(field_add:ik_FriendService.FriendListResponse.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >&
FriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:ik_FriendService.FriendListResponse.friends)
  return friends_;
}

// -------------------------------------------------------------------

// AddFriendRequest

// int32 myid = 1;
inline void AddFriendRequest::clear_myid() {
  myid_ = 0;
}
inline ::google::protobuf::int32 AddFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.myid)
  return myid_;
}
inline void AddFriendRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.myid)
}

// int32 friendid = 2;
inline void AddFriendRequest::clear_friendid() {
  friendid_ = 0;
}
inline ::google::protobuf::int32 AddFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.friendid)
  return friendid_;
}
inline void AddFriendRequest::set_friendid(::google::protobuf::int32 value) {
  
  friendid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.friendid)
}

// -------------------------------------------------------------------

// DeleteFriendRequest

// int32 myid = 1;
inline void DeleteFriendRequest::clear_myid() {
  myid_ = 0;
}
inline ::google::protobuf::int32 DeleteFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.myid)
  return myid_;
}
inline void DeleteFriendRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.myid)
}

// int32 friendid = 2;
inline void DeleteFriendRequest::clear_friendid() {
  friendid_ = 0;
}
inline ::google::protobuf::int32 DeleteFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.friendid)
  return friendid_;
}
inline void DeleteFriendRequest::set_friendid(::google::protobuf::int32 value) {
  
  friendid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.friendid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_FriendService

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_FriendService_2eproto
