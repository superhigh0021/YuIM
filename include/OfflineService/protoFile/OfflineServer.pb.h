// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OfflineServer.proto

#ifndef PROTOBUF_INCLUDED_OfflineServer_2eproto
#define PROTOBUF_INCLUDED_OfflineServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OfflineServer_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_OfflineServer_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_OfflineServer_2eproto();
namespace ik_OfflineServer {
class ReadOfflineRequest;
class ReadOfflineRequestDefaultTypeInternal;
extern ReadOfflineRequestDefaultTypeInternal _ReadOfflineRequest_default_instance_;
class ReadOfflineResponse;
class ReadOfflineResponseDefaultTypeInternal;
extern ReadOfflineResponseDefaultTypeInternal _ReadOfflineResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class WriteOffllineRequest;
class WriteOffllineRequestDefaultTypeInternal;
extern WriteOffllineRequestDefaultTypeInternal _WriteOffllineRequest_default_instance_;
}  // namespace ik_OfflineServer
namespace google {
namespace protobuf {
template<> ::ik_OfflineServer::ReadOfflineRequest* Arena::CreateMaybeMessage<::ik_OfflineServer::ReadOfflineRequest>(Arena*);
template<> ::ik_OfflineServer::ReadOfflineResponse* Arena::CreateMaybeMessage<::ik_OfflineServer::ReadOfflineResponse>(Arena*);
template<> ::ik_OfflineServer::Request* Arena::CreateMaybeMessage<::ik_OfflineServer::Request>(Arena*);
template<> ::ik_OfflineServer::WriteOffllineRequest* Arena::CreateMaybeMessage<::ik_OfflineServer::WriteOffllineRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ik_OfflineServer {

// ===================================================================

class Request :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes requestMsg = 2;
  void clear_requestmsg();
  static const int kRequestMsgFieldNumber = 2;
  const ::std::string& requestmsg() const;
  void set_requestmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_requestmsg(::std::string&& value);
  #endif
  void set_requestmsg(const char* value);
  void set_requestmsg(const void* value, size_t size);
  ::std::string* mutable_requestmsg();
  ::std::string* release_requestmsg();
  void set_allocated_requestmsg(::std::string* requestmsg);

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr requestmsg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class WriteOffllineRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.WriteOffllineRequest) */ {
 public:
  WriteOffllineRequest();
  virtual ~WriteOffllineRequest();

  WriteOffllineRequest(const WriteOffllineRequest& from);

  inline WriteOffllineRequest& operator=(const WriteOffllineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteOffllineRequest(WriteOffllineRequest&& from) noexcept
    : WriteOffllineRequest() {
    *this = ::std::move(from);
  }

  inline WriteOffllineRequest& operator=(WriteOffllineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WriteOffllineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteOffllineRequest* internal_default_instance() {
    return reinterpret_cast<const WriteOffllineRequest*>(
               &_WriteOffllineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WriteOffllineRequest* other);
  friend void swap(WriteOffllineRequest& a, WriteOffllineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteOffllineRequest* New() const final {
    return CreateMaybeMessage<WriteOffllineRequest>(nullptr);
  }

  WriteOffllineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteOffllineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteOffllineRequest& from);
  void MergeFrom(const WriteOffllineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOffllineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 friend_id = 1;
  void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  ::google::protobuf::int32 friend_id() const;
  void set_friend_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.WriteOffllineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 friend_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.ReadOfflineRequest) */ {
 public:
  ReadOfflineRequest();
  virtual ~ReadOfflineRequest();

  ReadOfflineRequest(const ReadOfflineRequest& from);

  inline ReadOfflineRequest& operator=(const ReadOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadOfflineRequest(ReadOfflineRequest&& from) noexcept
    : ReadOfflineRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineRequest& operator=(ReadOfflineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadOfflineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineRequest*>(
               &_ReadOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReadOfflineRequest* other);
  friend void swap(ReadOfflineRequest& a, ReadOfflineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineRequest* New() const final {
    return CreateMaybeMessage<ReadOfflineRequest>(nullptr);
  }

  ReadOfflineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadOfflineRequest& from);
  void MergeFrom(const ReadOfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 myid = 1;
  void clear_myid();
  static const int kMyidFieldNumber = 1;
  ::google::protobuf::int32 myid() const;
  void set_myid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.ReadOfflineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 myid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_OfflineServer.ReadOfflineResponse) */ {
 public:
  ReadOfflineResponse();
  virtual ~ReadOfflineResponse();

  ReadOfflineResponse(const ReadOfflineResponse& from);

  inline ReadOfflineResponse& operator=(const ReadOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadOfflineResponse(ReadOfflineResponse&& from) noexcept
    : ReadOfflineResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineResponse& operator=(ReadOfflineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadOfflineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineResponse*>(
               &_ReadOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReadOfflineResponse* other);
  friend void swap(ReadOfflineResponse& a, ReadOfflineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadOfflineResponse* New() const final {
    return CreateMaybeMessage<ReadOfflineResponse>(nullptr);
  }

  ReadOfflineResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadOfflineResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadOfflineResponse& from);
  void MergeFrom(const ReadOfflineResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes msg = 1;
  int msg_size() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg(int index) const;
  ::std::string* mutable_msg(int index);
  void set_msg(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_msg(int index, ::std::string&& value);
  #endif
  void set_msg(int index, const char* value);
  void set_msg(int index, const void* value, size_t size);
  ::std::string* add_msg();
  void add_msg(const ::std::string& value);
  #if LANG_CXX11
  void add_msg(::std::string&& value);
  #endif
  void add_msg(const char* value);
  void add_msg(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& msg() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_msg();

  // @@protoc_insertion_point(class_scope:ik_OfflineServer.ReadOfflineResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OfflineServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// bytes type = 1;
inline void Request::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.Request.type)
  return type_.GetNoArena();
}
inline void Request::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.Request.type)
}
#if LANG_CXX11
inline void Request::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_OfflineServer.Request.type)
}
#endif
inline void Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_OfflineServer.Request.type)
}
inline void Request::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_OfflineServer.Request.type)
}
inline ::std::string* Request::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.Request.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.Request.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.Request.type)
}

// bytes requestMsg = 2;
inline void Request::clear_requestmsg() {
  requestmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::requestmsg() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.Request.requestMsg)
  return requestmsg_.GetNoArena();
}
inline void Request::set_requestmsg(const ::std::string& value) {
  
  requestmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.Request.requestMsg)
}
#if LANG_CXX11
inline void Request::set_requestmsg(::std::string&& value) {
  
  requestmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_OfflineServer.Request.requestMsg)
}
#endif
inline void Request::set_requestmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_OfflineServer.Request.requestMsg)
}
inline void Request::set_requestmsg(const void* value, size_t size) {
  
  requestmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_OfflineServer.Request.requestMsg)
}
inline ::std::string* Request::mutable_requestmsg() {
  
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.Request.requestMsg)
  return requestmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_requestmsg() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.Request.requestMsg)
  
  return requestmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_requestmsg(::std::string* requestmsg) {
  if (requestmsg != nullptr) {
    
  } else {
    
  }
  requestmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestmsg);
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.Request.requestMsg)
}

// -------------------------------------------------------------------

// WriteOffllineRequest

// int32 friend_id = 1;
inline void WriteOffllineRequest::clear_friend_id() {
  friend_id_ = 0;
}
inline ::google::protobuf::int32 WriteOffllineRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.WriteOffllineRequest.friend_id)
  return friend_id_;
}
inline void WriteOffllineRequest::set_friend_id(::google::protobuf::int32 value) {
  
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:ik_OfflineServer.WriteOffllineRequest.friend_id)
}

// bytes msg = 2;
inline void WriteOffllineRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteOffllineRequest::msg() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.WriteOffllineRequest.msg)
  return msg_.GetNoArena();
}
inline void WriteOffllineRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_OfflineServer.WriteOffllineRequest.msg)
}
#if LANG_CXX11
inline void WriteOffllineRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ik_OfflineServer.WriteOffllineRequest.msg)
}
#endif
inline void WriteOffllineRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_OfflineServer.WriteOffllineRequest.msg)
}
inline void WriteOffllineRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_OfflineServer.WriteOffllineRequest.msg)
}
inline ::std::string* WriteOffllineRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.WriteOffllineRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteOffllineRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ik_OfflineServer.WriteOffllineRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteOffllineRequest::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik_OfflineServer.WriteOffllineRequest.msg)
}

// -------------------------------------------------------------------

// ReadOfflineRequest

// int32 myid = 1;
inline void ReadOfflineRequest::clear_myid() {
  myid_ = 0;
}
inline ::google::protobuf::int32 ReadOfflineRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.ReadOfflineRequest.myid)
  return myid_;
}
inline void ReadOfflineRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineRequest.myid)
}

// -------------------------------------------------------------------

// ReadOfflineResponse

// repeated bytes msg = 1;
inline int ReadOfflineResponse::msg_size() const {
  return msg_.size();
}
inline void ReadOfflineResponse::clear_msg() {
  msg_.Clear();
}
inline const ::std::string& ReadOfflineResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:ik_OfflineServer.ReadOfflineResponse.msg)
  return msg_.Get(index);
}
inline ::std::string* ReadOfflineResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ik_OfflineServer.ReadOfflineResponse.msg)
  return msg_.Mutable(index);
}
inline void ReadOfflineResponse::set_msg(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineResponse.msg)
  msg_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReadOfflineResponse::set_msg(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ik_OfflineServer.ReadOfflineResponse.msg)
  msg_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReadOfflineResponse::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const void* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline ::std::string* ReadOfflineResponse::add_msg() {
  // @@protoc_insertion_point(field_add_mutable:ik_OfflineServer.ReadOfflineResponse.msg)
  return msg_.Add();
}
inline void ReadOfflineResponse::add_msg(const ::std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ik_OfflineServer.ReadOfflineResponse.msg)
}
#if LANG_CXX11
inline void ReadOfflineResponse::add_msg(::std::string&& value) {
  msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ik_OfflineServer.ReadOfflineResponse.msg)
}
#endif
inline void ReadOfflineResponse::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const void* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ik_OfflineServer.ReadOfflineResponse.msg)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ReadOfflineResponse::msg() const {
  // @@protoc_insertion_point(field_list:ik_OfflineServer.ReadOfflineResponse.msg)
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ReadOfflineResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ik_OfflineServer.ReadOfflineResponse.msg)
  return &msg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_OfflineServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_OfflineServer_2eproto
